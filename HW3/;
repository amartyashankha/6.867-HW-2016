import numpy as np
from functools import partial

VAR_FACTOR = 1
EPS = 1e-7

def grad(x, f):
    return (f(x+EPS)-f(x-EPS))/(2*EPS)

class NN:
    def query(self, x):
        self.a[0] = x

        for i in range(1, self.L):
            self.z[i] = (self.W[i].T) * (self.a[i-1]) + self.b[i]
            self.a[i] = self.f(self.z[i])

        return self.a[self.L-1]

    def train(self, x, y):
        self.query(x)

        self.delta[self.L-1] = grad(self.z[self.L-1],self.f) * grad(self.a[self.L-1], partial(self.l, y)) 
        
        for i in range(self.L-2, 0, -1):
            self.delta[i] = np.diag(grad(self.z[i], self.f)) * self.W[i+1] * self.delta[i+1]

        for i in range(1, self.L):
            self.W[i] -= self.eta * self.a[i-1] * self.delta[i].T
            self.b[i] -= self.eta * self.delta[i]

    def print_weights(self):
        for i in range(self.L):
            print "================"
            print i
            print self.W[i]
            print self.b[i]

    def __init__(self, L, dim_x, dim_y, m, f, l, eta = 5e-4):
        self.W = [None, np.random.normal(0, VAR_FACTOR * m, (dim_x, m))]
        self.b = [None, np.random.normal(0, VAR_FACTOR * m, (m,1))]

        for i in range(2, L-1):
            self.W.append(np.random.normal(0, VAR_FACTOR * m, (m,m)))
            self.b.append(np.random.normal(0, VAR_FACTOR * m, (m,1)))

        self.W.append(np.random.normal(0, VAR_FACTOR, (m,dim_y)))
        self.b.append(np.random.normal(0, VAR_FACTOR, (1,1)))

        self.f = f
        self.l = l
        self.L = L
        self.m = m
        self.a = [None] * L
        self.z = [None] * L
        self.delta = [None] * L
        self.eta = eta
